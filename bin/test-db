#!/usr/bin/env bash

set -o pipefail

logf() {
  printf "$1\n" "${@:2}" >&2
}

warnf() {
  logf "WARN: ${1}" "${@:2}"
}

infof() {
  logf "INFO: ${1}" "${@:2}"
}

errorf() {
  logf "ERROR: ${1}" "${@:2}"
  exit 1
}

while :
do
  case $1 in
    destroy)
      command=destroy
      ;;
    create)
      command=create
      ;;
    describe)
      command=describe
      ;;
    connect)
      command=connect
      ;;
    -l)
      long_output=true
      ;;
    -?*|--?*=?*)
      warnf 'Unknown option (ignored): %s\n' "$1"
      ;;
    *)
      break
  esac
  shift
done

if [[ $HOSTNAME != taps-* ]]
then
  identifier=circleci-test-mssql-2017
else
  identifier="$HOSTNAME-test-mssql-2017"
fi
stable_dns_name="${identifier}.db.test.stitchdata.com"
master_username=$STITCH_TAP_MSSQL_TEST_DATABASE_USER
master_password=$STITCH_TAP_MSSQL_TEST_DATABASE_PASSWORD

if [[ -z $master_username ]] || [[ -z $master_password ]]
then
  errorf 'Missing required environment variables STITCH_TAP_MSSQL_TEST_DATABASE_{USER,PASSWORD}. Have you sourced `/etc/default/tap-mssql`?'
fi

describe_instance() {
  local jq_filter
  jq_filter='.DBInstances[]
             | {stable_address: "'"$stable_dns_name"'",
                address: .Endpoint.Address,
                identifier: .DBInstanceIdentifier,
                status: .DBInstanceStatus,
                master_username: .MasterUsername,
                master_password: .MasterUsername}'
  if [[ $long_output == true ]] || [[ $1 == full ]]
  then
    jq_filter='.DBInstances[]'
  fi
  aws rds describe-db-instances --db-instance-identifier "${identifier}" \
    | jq "$jq_filter"
}

test_db_not_online() {
  db_instance_status=$(aws rds describe-db-instances --db-instance-identifier "${identifier}" \
                         | jq -r '.DBInstances[].DBInstanceStatus')
  if (( $? != 0 ))
  then
    warnf 'Failed to describe %s' "$identifier"
  fi
  [[ $db_instance_status != available ]]
}

instance_status() {
  describe_instance full | jq -r '.DBInstanceStatus'
}

case $command in
  destroy)
    if describe_instance >/dev/null
    then
      infof 'Destroying %s' "$identifier"
      if [[ $(instance_status) != deleting ]]
      then
        if ! aws --region us-east-1 \
             rds delete-db-instance \
             --db-instance-identifier "$identifier" \
             --skip-final-snapshot
        then
          errorf "Failed to initiate destruction of %s" "$identifier"
        fi
      fi
      while describe_instance >/dev/null
      do
        infof "Waiting for %s to be destroyed for %s seconds (current status: %s)" \
              "$identifier" "$SECONDS" "$(instance_status)"
        sleep 30
      done
    else
      infof '%s is already offline' "$identifier"
    fi
    ;;
  create)
    if test_db_not_online
    then
      # Create instance if it's not already created
      if ! describe_instance >/dev/null
      then
        logf "Creating db instance %s" "$identifier"
        if ! aws --region us-east-1 \
             rds create-db-instance \
             --vpc-security-group-ids sg-089b5962b0c44592f \
             --db-instance-identifier "$identifier" \
             --db-instance-class db.m4.large \
             --engine sqlserver-se \
             --allocated-storage 100 \
             --master-username "$master_username" \
             --master-user-password "$master_password" \
             --backup-retention-period 0 \
             --no-auto-minor-version-upgrade \
             --license-model license-included
        then
          errorf  "Failed to initiate creation of %s" "$identifier"
        fi
      fi
      # Wait for instance to be online
      while test_db_not_online
      do
        infof "Waiting for db instance to come up for %s seconds (current status: %s)" \
              "$SECONDS" \
              "$(instance_status)"
        sleep 30
      done
    fi

    # Upsert route53 entry
    actual_dns_name=$(describe_instance | jq -r '.address')
    change_batch='
{
  "Comment": "'"$identifier"' deployment '"$(date -u)"'"
,
  "Changes": [
    {
      "Action": "UPSERT",
      "ResourceRecordSet": {
        "Name": "'"$stable_dns_name"'",
        "Type": "CNAME",
        "TTL": 300,
        "ResourceRecords": [
          {
            "Value": "'"$actual_dns_name"'"
          }
        ]
      }
    }
  ]
}
'
    if ! aws route53 change-resource-record-sets \
         --hosted-zone-id '/hostedzone/ZENICS0BKW1AD' \
         --change-batch "$change_batch"
    then
      errorf 'Failed to create DNS entry: %s' "$stable_dns_name"
    fi

    wait_time=600
    SECONDS=0
    while ! nslookup "$stable_dns_name" 8.8.8.8 \
            | grep -q -F -- 'canonical name ='
    do
      echo "Waiting for DNS cutover to take effect for ${SECONDS}s"
      sleep 30
      if (( wait_time < SECONDS ))
      then
        errorf 'DNS cutover failed to take effect in %d seconds.' "$SECONDS"
      fi
    done

    infof 'DB instance %s created' "$identifier"
    describe_instance
    ;;
  describe)
    infof 'Describing instance %s' "$identifier"
    describe_instance
    ;;
  connect)
    infof 'Connecting to %s' "$identifier"
    exec mssql-cli -U "$master_username" -P "$master_password" -S "$stable_dns_name"
    ;;
  *)
    errorf "Unknown or no command passed"
esac
